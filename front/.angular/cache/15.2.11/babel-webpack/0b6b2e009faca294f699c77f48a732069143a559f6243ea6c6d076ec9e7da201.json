{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/device/update-device.service\";\nimport * as i3 from \"src/app/services/device/device.service\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = [\"formElement\"];\nfunction DeviceRegisterComponent_button_29_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function DeviceRegisterComponent_button_29_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.cancel());\n    });\n    i0.ɵɵtext(1, \"Cancelar\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class DeviceRegisterComponent {\n  constructor(fb, updateDevice, deviceService, renderer) {\n    this.fb = fb;\n    this.updateDevice = updateDevice;\n    this.deviceService = deviceService;\n    this.renderer = renderer;\n    this.devices = null;\n    this.device = null;\n    this.changeText = 'Registrar';\n    this.updateSuccess = new EventEmitter();\n    this.deviceForm = this.fb.group({\n      id: [null],\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required]\n    });\n    if (this.device) {\n      this.changeText = 'Editar';\n      this.deviceForm.patchValue(this.device);\n      this.cancelShow = true;\n      this.highlightForm();\n    } else {\n      this.cancelShow = false;\n    }\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (changes['device'] && this.device) {\n      this.changeText = 'Editar';\n      this.deviceForm.patchValue(this.device);\n      this.deviceForm.controls['id'].setValue(this.device.id); // Assegure-se de que o id é setado\n      this.cancelShow = true;\n      setTimeout(() => this.formElement.nativeElement.scrollIntoView({\n        behavior: 'smooth'\n      }), 0);\n    }\n  }\n  submitForm() {\n    if (this.deviceForm.valid) {\n      const deviceData = this.deviceForm.value;\n      if (this.device && this.device.id) {\n        // Atualiza o dispositivo existente\n        this.deviceService.updateDevice(deviceData.id, deviceData).subscribe({\n          next: () => {\n            Swal.fire('Atualizado', 'Dispositivo atualizado com sucesso!', 'success');\n            this.deviceForm.reset();\n            this.device = null; // Resetar o dispositivo sendo editado\n          },\n\n          error: () => Swal.fire('Erro', 'Não foi possível atualizar o dispositivo.', 'error')\n        });\n      } else {\n        // Adiciona um novo dispositivo\n        this.deviceService.addDevice(deviceData).subscribe({\n          next: () => {\n            Swal.fire('Registrado', 'Dispositivo registrado com sucesso!', 'success');\n            this.deviceForm.reset();\n            this.changeText = 'Registrar';\n            this.cancelShow = false;\n            this.updateDevice.notifyDeviceUpdate();\n          },\n          error: () => Swal.fire('Erro', 'Não foi possível registrar o dispositivo.', 'error')\n        });\n      }\n    } else {\n      Swal.fire('Erro', 'Por favor, preencha todos os campos corretamente.', 'error');\n    }\n  }\n  highlightForm() {\n    const form = this.formElement.nativeElement;\n    this.renderer.addClass(form, 'form-highlight');\n    // Opcional: remover a classe após a animação\n    setTimeout(() => this.renderer.removeClass(form, 'form-highlight'), 2000);\n  }\n  cancel() {\n    this.deviceForm.reset();\n    this.changeText = 'Registrar';\n    this.cancelShow = false;\n  }\n  static #_ = this.ɵfac = function DeviceRegisterComponent_Factory(t) {\n    return new (t || DeviceRegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UpdateDeviceService), i0.ɵɵdirectiveInject(i3.DeviceService), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DeviceRegisterComponent,\n    selectors: [[\"app-device-register\"]],\n    viewQuery: function DeviceRegisterComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formElement = _t.first);\n      }\n    },\n    inputs: {\n      devices: \"devices\",\n      device: \"device\"\n    },\n    outputs: {\n      updateSuccess: \"updateSuccess\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 30,\n    vars: 4,\n    consts: [[1, \"card\", \"shadow-sm\", \"p-4\", \"mt-5\"], [1, \"card-body\"], [1, \"title\", \"b-4\"], [1, \"mb-2\"], [\"novalidate\", \"\", 1, \"row\", \"g-3\", \"align-items-end\", \"needs-validation\", \"mt-3\", 3, \"formGroup\", \"ngSubmit\"], [\"formElement\", \"\"], [1, \"col-md-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"id\", \"name\", \"formControlName\", \"name\", \"type\", \"text\", \"required\", \"\", 1, \"form-control\"], [1, \"invalid-feedback\"], [1, \"col-md-2\"], [\"for\", \"manufacturer\", 1, \"form-label\"], [\"id\", \"manufacturer\", \"formControlName\", \"manufacturer\", \"type\", \"text\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"description\", 1, \"form-label\"], [\"id\", \"description\", \"formControlName\", \"description\", \"type\", \"text\", \"required\", \"\", 1, \"form-control\"], [1, \"col-md-2\", \"d-grid\", \"gap-2\", \"x-auto\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"pull-right\", \"btn-block\"], [\"type\", \"button\", \"class\", \"btn btn-outline-danger btn-block\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-danger\", \"btn-block\", 3, \"click\"]],\n    template: function DeviceRegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"hr\", 3);\n        i0.ɵɵelementStart(5, \"form\", 4, 5);\n        i0.ɵɵlistener(\"ngSubmit\", function DeviceRegisterComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n        i0.ɵɵtext(9, \"Nome:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 8);\n        i0.ɵɵelementStart(11, \"div\", 9);\n        i0.ɵɵtext(12, \" Por favor, insira o nome do dispositivo. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 10)(14, \"label\", 11);\n        i0.ɵɵtext(15, \"Fabricante:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 12);\n        i0.ɵɵelementStart(17, \"div\", 9);\n        i0.ɵɵtext(18, \" Por favor, insira o fabricante do dispositivo. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(19, \"div\", 6)(20, \"label\", 13);\n        i0.ɵɵtext(21, \"Descri\\u00E7\\u00E3o:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"input\", 14);\n        i0.ɵɵelementStart(23, \"div\", 9);\n        i0.ɵɵtext(24, \" Por favor, insira uma descri\\u00E7\\u00E3o. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(25, \"div\", 15)(26, \"button\", 16);\n        i0.ɵɵtext(27);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"div\", 15);\n        i0.ɵɵtemplate(29, DeviceRegisterComponent_button_29_Template, 2, 0, \"button\", 17);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.changeText, \" um novo Dispositivo\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.deviceForm);\n        i0.ɵɵadvance(22);\n        i0.ɵɵtextInterpolate1(\"\", ctx.changeText, \" Dispositivo\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.cancelShow);\n      }\n    },\n    dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".card[_ngcontent-%COMP%] {\\n  background-color: #fbfbfb;\\n  border: 1px solid #e4e1e1;\\n}\\n\\n\\n.form-highlight[_ngcontent-%COMP%] {\\n  animation: _ngcontent-%COMP%_highlightAnimation 2s ease-out;\\n}\\n\\n@keyframes _ngcontent-%COMP%_highlightAnimation {\\n  0% {\\n    background-color: yellow;\\n  }\\n  100% {\\n    background-color: transparent;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kZXZpY2VzL2RldmljZS1yZWdpc3Rlci9kZXZpY2UtcmVnaXN0ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSx5QkFBQTtFQUNBLHlCQUFBO0FBQ0o7O0FBR0Esc0NBQUE7QUFDQTtFQUNJLHlDQUFBO0FBQUo7O0FBR0U7RUFDRTtJQUNFLHdCQUFBO0VBQUo7RUFFRTtJQUNFLDZCQUFBO0VBQUo7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5jYXJke1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmYmZiZmI7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2U0ZTFlMTtcbn1cblxuXG4vKiBFbSBkZXZpY2UtcmVnaXN0ZXIuY29tcG9uZW50LnNjc3MgKi9cbi5mb3JtLWhpZ2hsaWdodCB7XG4gICAgYW5pbWF0aW9uOiBoaWdobGlnaHRBbmltYXRpb24gMnMgZWFzZS1vdXQ7XG4gIH1cbiAgXG4gIEBrZXlmcmFtZXMgaGlnaGxpZ2h0QW5pbWF0aW9uIHtcbiAgICAwJSB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XG4gICAgfVxuICAgIDEwMCUge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgfVxuICB9XG4gICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","Validators","Swal","i0","DeviceRegisterComponent","constructor","fb","updateDevice","deviceService","renderer","deviceForm","group","id","name","required","description","manufacturer","device","changeText","patchValue","cancelShow","highlightForm","ngOnInit","ngOnChanges","changes","controls","setValue","setTimeout","formElement","nativeElement","scrollIntoView","behavior","submitForm","valid","deviceData","value","subscribe","next","fire","reset","error","addDevice","notifyDeviceUpdate","form","addClass","removeClass","cancel","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["/Users/cabukater/Projects/teste-front/front/src/app/components/devices/device-register/device-register.component.ts","/Users/cabukater/Projects/teste-front/front/src/app/components/devices/device-register/device-register.component.html"],"sourcesContent":["import { Component, OnInit, Input, OnChanges, SimpleChanges, EventEmitter, Output, ElementRef, ViewChild, Renderer2 } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { DeviceService } from 'src/app/services/device/device.service';\nimport { Device } from 'src/app/models/device.model';\nimport Swal from 'sweetalert2';\nimport { UpdateDeviceService } from 'src/app/services/device/update-device.service';\n\n@Component({\n  selector: 'app-device-register',\n  templateUrl: './device-register.component.html',\n  styleUrls: ['./device-register.component.scss']\n})\nexport class DeviceRegisterComponent implements OnInit, OnChanges {\n  deviceForm: FormGroup;\n  @Input() devices: Device[] | null = null;\n  @Input() device: Device | null = null;\n  changeText = 'Registrar';\n  @Output() updateSuccess = new EventEmitter<boolean>();\n  cancelShow!: boolean;\n  @ViewChild('formElement') formElement!: ElementRef;\n\n  constructor(\n    private fb: FormBuilder,\n   private updateDevice: UpdateDeviceService , \n    private deviceService: DeviceService,\n    private renderer: Renderer2\n  ) {\n    this.deviceForm = this.fb.group({\n      id: [null],\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required]\n    });\n\n    if (this.device) {\n      this.changeText = 'Editar';\n      this.deviceForm.patchValue(this.device);\n      this.cancelShow = true;\n      this.highlightForm();\n\n    }else{\n      this.cancelShow= false\n    }\n  }\n\n  ngOnInit(): void { }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['device'] && this.device) {\n      this.changeText = 'Editar';\n      this.deviceForm.patchValue(this.device);\n      this.deviceForm.controls['id'].setValue(this.device.id); // Assegure-se de que o id é setado\n      this.cancelShow = true;\n      setTimeout(() => this.formElement.nativeElement.scrollIntoView({ behavior: 'smooth' }), 0);\n\n    }\n  }\n\n  submitForm(): void {\n    if (this.deviceForm.valid) {\n      const deviceData = this.deviceForm.value;\n\n      if (this.device && this.device.id) {\n        // Atualiza o dispositivo existente\n        this.deviceService.updateDevice(deviceData.id, deviceData).subscribe({\n          next: () => {\n            Swal.fire('Atualizado', 'Dispositivo atualizado com sucesso!', 'success');\n            this.deviceForm.reset();\n            this.device = null; // Resetar o dispositivo sendo editado\n          },\n          error: () => Swal.fire('Erro', 'Não foi possível atualizar o dispositivo.', 'error')\n        });\n      } else {\n        // Adiciona um novo dispositivo\n        this.deviceService.addDevice(deviceData).subscribe({\n          next: () => {\n            Swal.fire('Registrado', 'Dispositivo registrado com sucesso!', 'success');\n            this.deviceForm.reset();\n            this.changeText = 'Registrar';\n            this.cancelShow= false\n            this.updateDevice.notifyDeviceUpdate();\n\n          },\n          error: () => Swal.fire('Erro', 'Não foi possível registrar o dispositivo.', 'error')\n        });\n      }\n    } else {\n      Swal.fire('Erro', 'Por favor, preencha todos os campos corretamente.', 'error');\n    }\n  }\n\n\n  highlightForm(): void {\n    const form = this.formElement.nativeElement;\n    this.renderer.addClass(form, 'form-highlight');\n    // Opcional: remover a classe após a animação\n    setTimeout(() => this.renderer.removeClass(form, 'form-highlight'), 2000);\n  }\n\n  cancel(){\n    this.deviceForm.reset();\n    this.changeText = 'Registrar';\n    this.cancelShow= false\n  }\n}\n\n","<div class=\"card shadow-sm p-4 mt-5\">\n  <div class=\"card-body\">\n    <h3 class=\"title b-4\">{{changeText}} um novo Dispositivo</h3>\n    <hr class=\"mb-2\">\n\n    <form [formGroup]=\"deviceForm\" (ngSubmit)=\"submitForm()\" class=\"row g-3 align-items-end needs-validation mt-3\" novalidate  #formElement>\n      <div class=\"col-md-3\">\n        <label for=\"name\" class=\"form-label\">Nome:</label>\n        <input id=\"name\" formControlName=\"name\" type=\"text\" class=\"form-control\" required>\n        <div class=\"invalid-feedback\">\n          Por favor, insira o nome do dispositivo.\n        </div>\n      </div>\n      <div class=\"col-md-2\">\n        <label for=\"manufacturer\" class=\"form-label\">Fabricante:</label>\n        <input id=\"manufacturer\" formControlName=\"manufacturer\" type=\"text\" class=\"form-control\" required>\n        <div class=\"invalid-feedback\">\n          Por favor, insira o fabricante do dispositivo.\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n        <label for=\"description\" class=\"form-label\">Descrição:</label>\n        <input id=\"description\" formControlName=\"description\" type=\"text\" class=\"form-control\" required>\n        <div class=\"invalid-feedback\">\n          Por favor, insira uma descrição.\n        </div>\n      </div>\n      <div class=\"col-md-2 d-grid gap-2 x-auto\">\n        <button type=\"submit\" class=\"btn btn-primary pull-right btn-block\">{{changeText}} Dispositivo</button>\n      </div>\n      <div class=\"col-md-2 d-grid gap-2 x-auto\">\n        <button type=\"button\" class=\"btn btn-outline-danger btn-block\"  *ngIf=\"cancelShow\" (click)=\"cancel()\">Cancelar</button>\n      </div>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}