{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  get isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  constructor(http) {\n    this.http = http;\n    this.authUrl = 'http://localhost:5000/api/login'; // Substitua pela URL correta da sua API de autenticação\n    this.loggedIn = new BehaviorSubject(this.hasToken());\n  }\n  login(username, password) {\n    return this.http.post(this.authUrl, {\n      username,\n      password\n    }).pipe(map(res => {\n      localStorage.setItem('token', res.token); // Salvar token\n      localStorage.setItem('username', res.username); // Salvar username\n    }), catchError(error => {\n      console.error('Erro no serviço de autenticação', error); // {4}\n      return throwError(error);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token'); // {5}\n    localStorage.removeItem('usernmae'); // {5}\n    this.loggedIn.next(false); // {6}\n  }\n\n  hasToken() {\n    return !!localStorage.getItem('token'); // {7}\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,UAAU,QAAQ,MAAM;AAC9D,SAASC,UAAU,EAAEC,GAAG,QAAa,gBAAgB;;;AAKrD,OAAM,MAAOC,WAAW;EAItB,IAAIC,UAAU;IACZ,OAAO,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAPhB,YAAO,GAAG,iCAAiC,CAAC,CAAC;IAC7C,aAAQ,GAAG,IAAIT,eAAe,CAAU,IAAI,CAACU,QAAQ,EAAE,CAAC;EAMxB;EAExCC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAM,IAAI,CAACC,OAAO,EAAE;MAAEH,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACG,IAAI,CACnEb,GAAG,CAAEc,GAAwC,IAAI;MAC/CX,YAAY,CAACY,OAAO,CAAC,OAAO,EAAED,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC;MAC1Cb,YAAY,CAACY,OAAO,CAAC,UAAU,EAAED,GAAG,CAACL,QAAQ,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,EACFV,UAAU,CAACkB,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC,CAAC,CAAC;MACzD,OAAOnB,UAAU,CAACmB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACH;EAEAE,MAAM;IACJhB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IAClCjB,YAAY,CAACiB,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;IACrC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7B;;EAEQf,QAAQ;IACd,OAAO,CAAC,CAACJ,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC1C;EAAC;qBA/BUH,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAsB,SAAXtB,WAAW;IAAAuB,YAFV;EAAM","names":["BehaviorSubject","throwError","catchError","map","AuthService","isLoggedIn","localStorage","getItem","constructor","http","hasToken","login","username","password","post","authUrl","pipe","res","setItem","token","error","console","logout","removeItem","loggedIn","next","factory","providedIn"],"sourceRoot":"","sources":["/Users/cabukater/Projects/teste-front/front/src/app/services/auth/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private authUrl = 'http://localhost:5000/api/login'; // Substitua pela URL correta da sua API de autenticação\n  private loggedIn = new BehaviorSubject<boolean>(this.hasToken());\n\n  get isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  constructor(private http: HttpClient) { }\n\n  login(username: string, password: string): Observable<any> {\n    return this.http.post<any>(this.authUrl, { username, password }).pipe(\n      map((res: { token: string; username: string }) => {\n        localStorage.setItem('token', res.token); // Salvar token\n        localStorage.setItem('username', res.username); // Salvar username\n      }),\n      catchError(error => {\n        console.error('Erro no serviço de autenticação', error); // {4}\n        return throwError(error);\n      })\n    );\n  }\n\n  logout() {\n    localStorage.removeItem('token'); // {5}\n    localStorage.removeItem('usernmae'); // {5}\n    this.loggedIn.next(false); // {6}\n  }\n\n  private hasToken(): boolean {\n    return !!localStorage.getItem('token'); // {7}\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}