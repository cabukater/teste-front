{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/device/device.service\";\nimport * as i2 from \"@angular/common\";\nfunction DeviceListComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const device_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(device_r3.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(device_r3.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(device_r3.manufacturer);\n  }\n}\nfunction DeviceListComponent_ng_template_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 7);\n    i0.ɵɵtext(1, \"Nenhum dispositivo encontrado.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class DeviceListComponent {\n  constructor(deviceService) {\n    this.deviceService = deviceService;\n    this.devices = [];\n  }\n  ngOnInit() {\n    this.getDevices();\n  }\n  getDevices() {\n    this.deviceService.getDevices().subscribe({\n      next: devices => {\n        this.devices = devices;\n        console.log(devices);\n      },\n      error: error => {\n        console.error('Erro ao obter dispositivos', error);\n      }\n    });\n  }\n  static #_ = this.ɵfac = function DeviceListComponent_Factory(t) {\n    return new (t || DeviceListComponent)(i0.ɵɵdirectiveInject(i1.DeviceService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DeviceListComponent,\n    selectors: [[\"app-device-list\"]],\n    decls: 17,\n    vars: 1,\n    consts: [[1, \"container\", \"mt-5\"], [1, \"mb-3\", \"text-center\"], [1, \"table-responsive\"], [1, \"table\", \"table-bordered\", \"table-hover\"], [1, \"table-dark\"], [4, \"ngFor\", \"ngForOf\"], [\"noDevices\", \"\"], [1, \"text-center\"]],\n    template: function DeviceListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Lista de Dispositivos\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"table\", 3)(5, \"thead\", 4)(6, \"tr\")(7, \"th\");\n        i0.ɵɵtext(8, \"Nome\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"th\");\n        i0.ɵɵtext(10, \"Descri\\u00E7\\u00E3o\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"th\");\n        i0.ɵɵtext(12, \"Fabricante\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"tbody\");\n        i0.ɵɵtemplate(14, DeviceListComponent_tr_14_Template, 7, 3, \"tr\", 5);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(15, DeviceListComponent_ng_template_15_Template, 2, 0, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", ctx.devices);\n      }\n    },\n    dependencies: [i2.NgForOf],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";;;;;IAYQA,0BAAmC;IAC7BA,YAAiB;IAAAA,iBAAK;IAC1BA,0BAAI;IAAAA,YAAwB;IAAAA,iBAAK;IACjCA,0BAAI;IAAAA,YAAyB;IAAAA,iBAAK;;;;IAF9BA,eAAiB;IAAjBA,oCAAiB;IACjBA,eAAwB;IAAxBA,2CAAwB;IACxBA,eAAyB;IAAzBA,4CAAyB;;;;;IAMnCA,4BAAuB;IAAAA,8CAA8B;IAAAA,iBAAI;;;ACP7D,OAAM,MAAOC,mBAAmB;EAG9BC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;IAFjC,YAAO,GAAa,EAAE;EAE8B;EAEpDC,QAAQ;IACL,IAAI,CAACC,UAAU,EAAE;EAEpB;EAEAA,UAAU;IACR,IAAI,CAACF,aAAa,CAACE,UAAU,EAAE,CAACC,SAAS,CAAC;MACxCC,IAAI,EAAGC,OAAO,IAAI;QAChB,IAAI,CAACA,OAAO,GAAGA,OAAO;QACtBC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;MACtB,CAAC;MACDG,KAAK,EAAGA,KAAK,IAAI;QACfF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;KACD,CAAC;EACJ;EAAC;qBApBUV,mBAAmB;EAAA;EAAA;UAAnBA,mBAAmB;IAAAW;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QDdhChB,8BAA4B;QACGA,qCAAqB;QAAAA,iBAAK;QACvDA,8BAA8B;QAIlBA,oBAAI;QAAAA,iBAAK;QACbA,0BAAI;QAAAA,oCAAS;QAAAA,iBAAK;QAClBA,2BAAI;QAAAA,2BAAU;QAAAA,iBAAK;QAGvBA,8BAAO;QACLA,oEAIK;QACPA,iBAAQ;QAGZA,uHAEc;QAChBA,iBAAM;;;QAXyBA,gBAAU;QAAVA,qCAAU","names":["i0","DeviceListComponent","constructor","deviceService","ngOnInit","getDevices","subscribe","next","devices","console","log","error","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/cabukater/Projects/teste-front/front/src/app/components/devices/device-list/device-list.component.html","/Users/cabukater/Projects/teste-front/front/src/app/components/devices/device-list/device-list.component.ts"],"sourcesContent":["<div class=\"container mt-5\">\n  <h2 class=\"mb-3 text-center\">Lista de Dispositivos</h2>\n  <div class=\"table-responsive\">\n    <table class=\"table table-bordered table-hover\">\n      <thead class=\"table-dark\">\n        <tr>\n          <th>Nome</th>\n          <th>Descrição</th>\n          <th>Fabricante</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let device of devices\">\n          <td>{{ device.name }}</td>\n          <td>{{ device.description }}</td>\n          <td>{{ device.manufacturer }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  <ng-template #noDevices>\n    <p class=\"text-center\">Nenhum dispositivo encontrado.</p>\n  </ng-template>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Device } from 'src/app/models/device.model';\nimport { DeviceService } from 'src/app/services/device/device.service';\n\n// Representa a estrutura esperada da resposta da API\ninterface ApiResponse {\n  devices: Device[];\n}\n\n@Component({\n  selector: 'app-device-list',\n  templateUrl: './device-list.component.html',\n  styleUrls: ['./device-list.component.scss']\n})\nexport class DeviceListComponent implements OnInit {\n  devices: Device[] = [];\n\n  constructor(private deviceService: DeviceService) { }\n\n  ngOnInit(): void {\n     this.getDevices()\n   \n  }\n\n  getDevices(){\n    this.deviceService.getDevices().subscribe({\n      next: (devices) => {\n        this.devices = devices;\n        console.log(devices)\n      },\n      error: (error) => {\n        console.error('Erro ao obter dispositivos', error);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}