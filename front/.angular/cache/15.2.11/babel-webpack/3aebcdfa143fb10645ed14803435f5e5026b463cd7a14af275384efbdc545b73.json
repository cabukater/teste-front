{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/device/device.service\";\nimport * as i3 from \"@angular/common\";\nfunction DeviceRegisterComponent_tr_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const device_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(device_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(device_r1.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(device_r1.manufacturer);\n  }\n}\nexport class DeviceRegisterComponent {\n  constructor(fb, deviceService) {\n    this.fb = fb;\n    this.deviceService = deviceService;\n    this.devices = [];\n    this.deviceForm = this.fb.group({\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.loadDevices();\n  }\n  addDevice() {\n    if (this.deviceForm.valid) {\n      this.deviceService.addDevice(this.deviceForm.value).subscribe(() => {\n        this.deviceForm.reset();\n        this.loadDevices();\n      });\n    }\n  }\n  loadDevices() {\n    this.deviceService.getDevices().subscribe(devices => {\n      this.devices = devices;\n    });\n  }\n  static #_ = this.ɵfac = function DeviceRegisterComponent_Factory(t) {\n    return new (t || DeviceRegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.DeviceService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DeviceRegisterComponent,\n    selectors: [[\"app-device-register\"]],\n    decls: 27,\n    vars: 2,\n    consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"id\", \"name\", \"formControlName\", \"name\", \"type\", \"text\"], [\"for\", \"description\"], [\"id\", \"description\", \"formControlName\", \"description\", \"type\", \"text\"], [\"for\", \"manufacturer\"], [\"id\", \"manufacturer\", \"formControlName\", \"manufacturer\", \"type\", \"text\"], [\"type\", \"submit\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function DeviceRegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function DeviceRegisterComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.addDevice();\n        });\n        i0.ɵɵelementStart(2, \"div\")(3, \"label\", 2);\n        i0.ɵɵtext(4, \"Nome:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\")(7, \"label\", 4);\n        i0.ɵɵtext(8, \"Descri\\u00E7\\u00E3o:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\")(11, \"label\", 6);\n        i0.ɵɵtext(12, \"Fabricante:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 8);\n        i0.ɵɵtext(15, \"Registrar Dispositivo\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"table\")(17, \"thead\")(18, \"tr\")(19, \"th\");\n        i0.ɵɵtext(20, \"Nome\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"th\");\n        i0.ɵɵtext(22, \"Descri\\u00E7\\u00E3o\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"th\");\n        i0.ɵɵtext(24, \"Fabricante\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(25, \"tbody\");\n        i0.ɵɵtemplate(26, DeviceRegisterComponent_tr_26_Template, 7, 3, \"tr\", 9);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.deviceForm);\n        i0.ɵɵadvance(25);\n        i0.ɵɵproperty(\"ngForOf\", ctx.devices);\n      }\n    },\n    dependencies: [i3.NgForOf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;IC2B3DC,0BAAmC;IAC7BA,YAAiB;IAAAA,iBAAK;IAC1BA,0BAAI;IAAAA,YAAwB;IAAAA,iBAAK;IACjCA,0BAAI;IAAAA,YAAyB;IAAAA,iBAAK;;;;IAF9BA,eAAiB;IAAjBA,oCAAiB;IACjBA,eAAwB;IAAxBA,2CAAwB;IACxBA,eAAyB;IAAzBA,4CAAyB;;;ADpBvC,OAAM,MAAOC,uBAAuB;EAIlCC,YAAoBC,EAAe,EAAUC,aAA4B;IAArD,OAAE,GAAFD,EAAE;IAAuB,kBAAa,GAAbC,aAAa;IAF1D,YAAO,GAAa,EAAE;IAGpB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC9BC,IAAI,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,QAAQ,CAAC;MAC/BC,WAAW,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACS,QAAQ,CAAC;MACtCE,YAAY,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACS,QAAQ;KACvC,CAAC;EACJ;EAEAG,QAAQ;IACN,IAAI,CAACC,WAAW,EAAE;EACpB;EAEAC,SAAS;IACP,IAAI,IAAI,CAACR,UAAU,CAACS,KAAK,EAAE;MACzB,IAAI,CAACV,aAAa,CAACS,SAAS,CAAC,IAAI,CAACR,UAAU,CAACU,KAAK,CAAC,CAACC,SAAS,CAAC,MAAK;QACjE,IAAI,CAACX,UAAU,CAACY,KAAK,EAAE;QACvB,IAAI,CAACL,WAAW,EAAE;MACpB,CAAC,CAAC;;EAEN;EAEAA,WAAW;IACT,IAAI,CAACR,aAAa,CAACc,UAAU,EAAE,CAACF,SAAS,CAACG,OAAO,IAAG;MAClD,IAAI,CAACA,OAAO,GAAGA,OAAO;IACxB,CAAC,CAAC;EACJ;EAAC;qBA7BUlB,uBAAuB;EAAA;EAAA;UAAvBA,uBAAuB;IAAAmB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCTpCxB,8BAAuB;QACYA;UAAA,OAAYyB,eAAW;QAAA,EAAC;QACrDzB,2BAAK;QACeA,qBAAK;QAAAA,iBAAQ;QAC/BA,2BAAoD;QACtDA,iBAAM;QACNA,2BAAK;QACsBA,oCAAU;QAAAA,iBAAQ;QAC3CA,2BAAkE;QACpEA,iBAAM;QACNA,4BAAK;QACuBA,4BAAW;QAAAA,iBAAQ;QAC7CA,4BAAoE;QACtEA,iBAAM;QACNA,kCAAsB;QAAAA,sCAAqB;QAAAA,iBAAS;QAGtDA,8BAAO;QAGGA,qBAAI;QAAAA,iBAAK;QACbA,2BAAI;QAAAA,oCAAS;QAAAA,iBAAK;QAClBA,2BAAI;QAAAA,2BAAU;QAAAA,iBAAK;QAGvBA,8BAAO;QACLA,wEAIK;QACPA,iBAAQ;;;QA9BJA,eAAwB;QAAxBA,0CAAwB;QAyBHA,gBAAU;QAAVA,qCAAU","names":["Validators","i0","DeviceRegisterComponent","constructor","fb","deviceService","deviceForm","group","name","required","description","manufacturer","ngOnInit","loadDevices","addDevice","valid","value","subscribe","reset","getDevices","devices","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/cabukater/Projects/teste-front/front/src/app/components/devices/device-register/device-register.component.ts","/Users/cabukater/Projects/teste-front/front/src/app/components/devices/device-register/device-register.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Device } from 'src/app/models/device.model';\nimport { DeviceService } from 'src/app/services/device/device.service';\n\n\n@Component({\n  selector: 'app-device-register',\n  templateUrl: './device-register.component.html',\n  styleUrls: ['./device-register.component.scss']\n})\nexport class DeviceRegisterComponent {\n  deviceForm: FormGroup;\n  devices: Device[] = [];\n\n  constructor(private fb: FormBuilder, private deviceService: DeviceService) {\n    this.deviceForm = this.fb.group({\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadDevices();\n  }\n\n  addDevice(): void {\n    if (this.deviceForm.valid) {\n      this.deviceService.addDevice(this.deviceForm.value).subscribe(() => {\n        this.deviceForm.reset();\n        this.loadDevices();\n      });\n    }\n  }\n\n  loadDevices(): void {\n    this.deviceService.getDevices().subscribe(devices => {\n      this.devices = devices;\n    });\n  }\n}","<!-- src/app/device-register/device-register.component.html -->\n\n<div class=\"container\">\n    <form [formGroup]=\"deviceForm\" (ngSubmit)=\"addDevice()\">\n      <div>\n        <label for=\"name\">Nome:</label>\n        <input id=\"name\" formControlName=\"name\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"description\">Descrição:</label>\n        <input id=\"description\" formControlName=\"description\" type=\"text\">\n      </div>\n      <div>\n        <label for=\"manufacturer\">Fabricante:</label>\n        <input id=\"manufacturer\" formControlName=\"manufacturer\" type=\"text\">\n      </div>\n      <button type=\"submit\">Registrar Dispositivo</button>\n    </form>\n  \n    <table>\n      <thead>\n        <tr>\n          <th>Nome</th>\n          <th>Descrição</th>\n          <th>Fabricante</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let device of devices\">\n          <td>{{ device.name }}</td>\n          <td>{{ device.description }}</td>\n          <td>{{ device.manufacturer }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}