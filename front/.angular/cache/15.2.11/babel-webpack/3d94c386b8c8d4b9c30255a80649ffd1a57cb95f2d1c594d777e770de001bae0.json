{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error/error-handler.service\";\nexport class DeviceService {\n  constructor(http, errorHandler) {\n    this.http = http;\n    this.errorHandler = errorHandler;\n    this.apiUrl = 'http://localhost:5000/api/devices';\n  }\n  getDevices() {\n    return this.http.get(this.apiUrl).pipe(map(response => response.devices),\n    // Garantindo que a resposta seja mapeada para Device[]\n    catchError(this.errorHandler.handleError));\n  }\n  addDevice(device) {\n    return this.http.post(this.apiUrl, device);\n  }\n  static #_ = this.ɵfac = function DeviceService_Factory(t) {\n    return new (t || DeviceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorHandlerService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeviceService,\n    factory: DeviceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAOhD,OAAM,MAAOC,aAAa;EAGxBC,YACUC,IAAgB,EAChBC,YAAiC;IADjC,SAAI,GAAJD,IAAI;IACJ,iBAAY,GAAZC,YAAY;IAHd,WAAM,GAAG,mCAAmC;EAIhD;EAEJC,UAAU;IACR,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAsB,IAAI,CAACC,MAAM,CAAC,CAACC,IAAI,CACzDR,GAAG,CAAES,QAA2B,IAAKA,QAAQ,CAACC,OAAO,CAAC;IAAE;IACxDX,UAAU,CAAC,IAAI,CAACK,YAAY,CAACO,WAAW,CAAC,CAC1C;EACH;EAEAC,SAAS,CAACC,MAAc;IACtB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAS,IAAI,CAACP,MAAM,EAAEM,MAAM,CAAC;EACpD;EAAC;qBAjBUZ,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAc,SAAbd,aAAa;IAAAe,YAFZ;EAAM","names":["catchError","map","DeviceService","constructor","http","errorHandler","getDevices","get","apiUrl","pipe","response","devices","handleError","addDevice","device","post","factory","providedIn"],"sourceRoot":"","sources":["/Users/cabukater/Projects/teste-front/front/src/app/services/device/device.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { ErrorHandlerService } from '../error/error-handler.service';\nimport { Device } from 'src/app/models/device.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceService {\n\n  private apiUrl = 'http://localhost:5000/api/devices'; \n  constructor(\n    private http: HttpClient,\n    private errorHandler: ErrorHandlerService \n  ) { }\n\n  getDevices(): Observable<Device[]> {\n    return this.http.get<{devices: Device[]}>(this.apiUrl).pipe(\n      map((response: { devices: any; }) => response.devices), // Garantindo que a resposta seja mapeada para Device[]\n      catchError(this.errorHandler.handleError)\n    );\n  }\n\n  addDevice(device: Device): Observable<Device> {\n    return this.http.post<Device>(this.apiUrl, device);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}