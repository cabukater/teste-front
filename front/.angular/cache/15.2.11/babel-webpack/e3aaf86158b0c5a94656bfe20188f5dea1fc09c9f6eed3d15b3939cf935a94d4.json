{"ast":null,"code":"import _asyncToGenerator from \"/Users/cabukater/Projects/teste-front/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ErrorHandlerService {\n  handleError(error) {\n    let errorMessage;\n    if (error instanceof HttpErrorResponse) {\n      // Erro do servidor\n      errorMessage = `Erro ${error.status}: ${error.message}`;\n      // Erro do cliente ou outro\n      errorMessage = error.message ? error.message : error.toString();\n    }\n    console.error( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (params) {\n        errorMessage;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    return throwError( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (params) {\n        errorMessage;\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  static #_ = this.ɵfac = function ErrorHandlerService_Factory(t) {\n    return new (t || ErrorHandlerService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorHandlerService,\n    factory: ErrorHandlerService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,iBAAiB,QAAQ,sBAAsB;AAExD,SAAqBC,UAAU,QAAQ,MAAM;;AAK7C,OAAM,MAAOC,mBAAmB;EAEvBC,WAAW,CAACC,KAA8B;IAC/C,IAAIC,YAAoB;IACxB,IAAID,KAAK,YAAYJ,iBAAiB,EAAE;MACtC;MACAK,YAAY,GAAG,QAAQD,KAAK,CAACE,MAAM,KAAKF,KAAK,CAACG,OAAO,EAAE;MACvD;MACAF,YAAY,GAAGD,KAAK,CAACG,OAAO,GAAGH,KAAK,CAACG,OAAO,GAAGH,KAAK,CAACI,QAAQ,EAAE;;IAEjEC,OAAO,CAACL,KAAK;MAAA,6BAAC,WAAOM,MAAa,EAAI;QACpCL,YAAY;MACd,CAAC;MAAA;QAAA;MAAA;IAAA,IAAC;IACF,OAAOJ,UAAU;MAAA,8BAAC,WAAOS,MAAa,EAAI;QACxCL,YAAY;MACd,CAAC;MAAA;QAAA;MAAA;IAAA,IAAC;EACJ;EAAC;qBAhBUH,mBAAmB;EAAA;EAAA;WAAnBA,mBAAmB;IAAAS,SAAnBT,mBAAmB;IAAAU,YAFlB;EAAM","names":["HttpErrorResponse","throwError","ErrorHandlerService","handleError","error","errorMessage","status","message","toString","console","params","factory","providedIn"],"sourceRoot":"","sources":["/Users/cabukater/Projects/teste-front/front/src/app/services/error/error-handler.service.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerService {\n\n  public handleError(error: HttpErrorResponse | any): Observable<never> {\n    let errorMessage: string;\n    if (error instanceof HttpErrorResponse) {\n      // Erro do servidor\n      errorMessage = `Erro ${error.status}: ${error.message}`;\n      // Erro do cliente ou outro\n      errorMessage = error.message ? error.message : error.toString();\n    }\n    console.error(async (params:string) => {\n      errorMessage\n    });\n    return throwError(async (params:string) => {\n      errorMessage\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}