{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error/error-handler.service\";\nexport class DeviceService {\n  constructor(http, errorHandler) {\n    this.http = http;\n    this.errorHandler = errorHandler;\n    this.apiUrl = 'URL_DA_SUA_API_AQUI';\n  }\n  getDevices() {\n    return this.http.get('/api/devices').pipe(catchError(this.errorHandler.handleError));\n  }\n  static #_ = this.ɵfac = function DeviceService_Factory(t) {\n    return new (t || DeviceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorHandlerService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeviceService,\n    factory: DeviceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,UAAU,QAAQ,gBAAgB;;;;AAM3C,OAAM,MAAOC,aAAa;EAGxBC,YACUC,IAAgB,EAChBC,YAAiC;IADjC,SAAI,GAAJD,IAAI;IACJ,iBAAY,GAAZC,YAAY;IAHd,WAAM,GAAG,qBAAqB;EAIlC;EAEJC,UAAU;IACR,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,cAAc,CAAC,CAACC,IAAI,CACvCP,UAAU,CAAC,IAAI,CAACI,YAAY,CAACI,WAAW,CAAC,CAC1C;EACH;EAAC;qBAZUP,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAQ,SAAbR,aAAa;IAAAS,YAFZ;EAAM","names":["catchError","DeviceService","constructor","http","errorHandler","getDevices","get","pipe","handleError","factory","providedIn"],"sourceRoot":"","sources":["/Users/cabukater/Projects/teste-front/front/src/app/services/device/device.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ErrorHandlerService } from '../error/error-handler.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeviceService {\n\n  private apiUrl = 'URL_DA_SUA_API_AQUI'; \n  constructor(\n    private http: HttpClient,\n    private errorHandler: ErrorHandlerService \n  ) { }\n\n  getDevices() {\n    return this.http.get('/api/devices').pipe(\n      catchError(this.errorHandler.handleError) \n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}