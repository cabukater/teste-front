{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/device/device.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction DeviceListComponent_tr_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const device_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(device_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(device_r1.status);\n  }\n}\nexport class DeviceListComponent {\n  constructor(deviceService, fb) {\n    this.deviceService = deviceService;\n    this.fb = fb;\n    this.devices = [];\n  }\n  ngOnInit() {\n    this.deviceForm = this.fb.group({\n      name: ['', Validators.required],\n      status: ['active', Validators.required] // ou qualquer outro valor padrão que faça sentido\n    });\n\n    this.loadDevices();\n  }\n  loadDevices() {\n    this.deviceService.getDevices().subscribe({\n      next: data => {\n        this.devices = data;\n      },\n      error: error => {\n        console.error('Houve um erro ao carregar os dispositivos', error);\n      }\n    });\n  }\n  registerDevice() {\n    if (this.deviceForm.valid) {\n      // Aqui você pode adicionar a lógica para enviar o formulário\n      // para o seu serviço e registrar o dispositivo\n      console.log(this.deviceForm.value);\n    }\n  }\n  static #_ = this.ɵfac = function DeviceListComponent_Factory(t) {\n    return new (t || DeviceListComponent)(i0.ɵɵdirectiveInject(i1.DeviceService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DeviceListComponent,\n    selectors: [[\"app-device-list\"]],\n    decls: 27,\n    vars: 2,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\"], [\"for\", \"status\"], [\"id\", \"status\", \"formControlName\", \"status\"], [\"value\", \"active\"], [\"value\", \"inactive\"], [\"type\", \"submit\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function DeviceListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"device-list works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\")(3, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function DeviceListComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.registerDevice();\n        });\n        i0.ɵɵelementStart(4, \"div\")(5, \"label\", 1);\n        i0.ɵɵtext(6, \"Nome do Dispositivo:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\")(9, \"label\", 3);\n        i0.ɵɵtext(10, \"Status:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"select\", 4)(12, \"option\", 5);\n        i0.ɵɵtext(13, \"Ativo\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"option\", 6);\n        i0.ɵɵtext(15, \"Inativo\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(16, \"button\", 7);\n        i0.ɵɵtext(17, \"Registrar Dispositivo\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"table\")(19, \"thead\")(20, \"tr\")(21, \"th\");\n        i0.ɵɵtext(22, \"Nome\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"th\");\n        i0.ɵɵtext(24, \"Status\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(25, \"tbody\");\n        i0.ɵɵtemplate(26, DeviceListComponent_tr_26_Template, 5, 2, \"tr\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.deviceForm);\n        i0.ɵɵadvance(23);\n        i0.ɵɵproperty(\"ngForOf\", ctx.devices);\n      }\n    },\n    dependencies: [i3.NgForOf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;ICyB3DC,0BAAmC;IAC7BA,YAAiB;IAAAA,iBAAK;IAC1BA,0BAAI;IAAAA,YAAmB;IAAAA,iBAAK;;;;IADxBA,eAAiB;IAAjBA,oCAAiB;IACjBA,eAAmB;IAAnBA,sCAAmB;;;ADnBjC,OAAM,MAAOC,mBAAmB;EAI9BC,YACUC,aAA4B,EAC5BC,EAAe;IADf,kBAAa,GAAbD,aAAa;IACb,OAAE,GAAFC,EAAE;IALZ,YAAO,GAAU,EAAE;EAMf;EAEJC,QAAQ;IACN,IAAI,CAACC,UAAU,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC9BC,IAAI,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MAC/BC,MAAM,EAAE,CAAC,QAAQ,EAAEX,UAAU,CAACU,QAAQ,CAAC,CAAC;KACzC,CAAC;;IAEF,IAAI,CAACE,WAAW,EAAE;EACpB;EAEAA,WAAW;IACT,IAAI,CAACR,aAAa,CAACS,UAAU,EAAE,CAACC,SAAS,CAAC;MACxCC,IAAI,EAAGC,IAAS,IAAI;QAClB,IAAI,CAACC,OAAO,GAAGD,IAAI;MACrB,CAAC;MACDE,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE;KACD,CAAC;EACJ;EAEAE,cAAc;IACZ,IAAI,IAAI,CAACb,UAAU,CAACc,KAAK,EAAE;MACzB;MACA;MACAF,OAAO,CAACG,GAAG,CAAC,IAAI,CAACf,UAAU,CAACgB,KAAK,CAAC;;EAEtC;EAAC;qBAnCUrB,mBAAmB;EAAA;EAAA;UAAnBA,mBAAmB;IAAAsB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCThC3B,yBAAG;QAAAA,kCAAkB;QAAAA,iBAAI;QAEzBA,2BAAK;QAC8BA;UAAA,OAAY4B,oBAAgB;QAAA,EAAC;QAC1D5B,2BAAK;QACeA,oCAAoB;QAAAA,iBAAQ;QAC9CA,2BAAoD;QACtDA,iBAAM;QACNA,2BAAK;QACiBA,wBAAO;QAAAA,iBAAQ;QACnCA,kCAA6C;QACpBA,sBAAK;QAAAA,iBAAS;QACrCA,kCAAyB;QAAAA,wBAAO;QAAAA,iBAAS;QAG7CA,kCAAsB;QAAAA,sCAAqB;QAAAA,iBAAS;QAGtDA,8BAAO;QAGGA,qBAAI;QAAAA,iBAAK;QACbA,2BAAI;QAAAA,uBAAM;QAAAA,iBAAK;QAGnBA,8BAAO;QACLA,oEAGK;QACPA,iBAAQ;;;QA3BJA,eAAwB;QAAxBA,0CAAwB;QAuBHA,gBAAU;QAAVA,qCAAU","names":["Validators","i0","DeviceListComponent","constructor","deviceService","fb","ngOnInit","deviceForm","group","name","required","status","loadDevices","getDevices","subscribe","next","data","devices","error","console","registerDevice","valid","log","value","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/cabukater/Projects/teste-front/front/src/app/components/device-list/device-list.component.ts","/Users/cabukater/Projects/teste-front/front/src/app/components/device-list/device-list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { DeviceService } from 'src/app/services/device/device.service';\n\n@Component({\n  selector: 'app-device-list',\n  templateUrl: './device-list.component.html',\n  styleUrls: ['./device-list.component.scss']\n})\nexport class DeviceListComponent implements OnInit {\n  devices: any[] = [];\n  deviceForm!: FormGroup;\n\n  constructor(\n    private deviceService: DeviceService,\n    private fb: FormBuilder\n  ) { }\n\n  ngOnInit(): void {\n    this.deviceForm = this.fb.group({\n      name: ['', Validators.required],\n      status: ['active', Validators.required] // ou qualquer outro valor padrão que faça sentido\n    });\n\n    this.loadDevices();\n  }\n\n  loadDevices(): void {\n    this.deviceService.getDevices().subscribe({\n      next: (data: any) => {\n        this.devices = data;\n      },\n      error: (error) => {\n        console.error('Houve um erro ao carregar os dispositivos', error);\n      }\n    });\n  }\n\n  registerDevice(): void {\n    if (this.deviceForm.valid) {\n      // Aqui você pode adicionar a lógica para enviar o formulário\n      // para o seu serviço e registrar o dispositivo\n      console.log(this.deviceForm.value);\n    }\n  }\n}\n","<p>device-list works!</p>\n<!-- device-list.component.html -->\n<div>\n    <form [formGroup]=\"deviceForm\" (ngSubmit)=\"registerDevice()\">\n      <div>\n        <label for=\"name\">Nome do Dispositivo:</label>\n        <input type=\"text\" id=\"name\" formControlName=\"name\">\n      </div>\n      <div>\n        <label for=\"status\">Status:</label>\n        <select id=\"status\" formControlName=\"status\">\n          <option value=\"active\">Ativo</option>\n          <option value=\"inactive\">Inativo</option>\n        </select>\n      </div>\n      <button type=\"submit\">Registrar Dispositivo</button>\n    </form>\n  \n    <table>\n      <thead>\n        <tr>\n          <th>Nome</th>\n          <th>Status</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let device of devices\">\n          <td>{{ device.name }}</td>\n          <td>{{ device.status }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}