{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/device/device.service\";\nexport class DeviceRegisterComponent {\n  constructor(fb, deviceService) {\n    this.fb = fb;\n    this.deviceService = deviceService;\n    this.device = null;\n    console.log(this.device);\n    this.deviceForm = this.fb.group({\n      id: [null],\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required]\n    });\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    if (changes['editingDevice'] && changes['editingDevice'].currentValue) {\n      this.deviceForm.patchValue(changes['editingDevice'].currentValue);\n    }\n  }\n  submitForm() {\n    if (this.deviceForm.valid) {\n      const deviceData = this.deviceForm.value;\n      if (this.device) {\n        // Atualiza o dispositivo existente\n        this.deviceService.updateDevice(deviceData.id).subscribe({\n          next: () => {\n            Swal.fire('Atualizado', 'Dispositivo atualizado com sucesso!', 'success');\n            this.deviceForm.reset();\n            this.device = null;\n          },\n          error: () => Swal.fire('Erro', 'Não foi possível atualizar o dispositivo.', 'error')\n        });\n      } else {\n        // Adiciona um novo dispositivo\n        this.deviceService.addDevice(deviceData).subscribe({\n          next: () => {\n            Swal.fire('Registrado', 'Dispositivo registrado com sucesso!', 'success');\n            this.deviceForm.reset();\n          },\n          error: () => Swal.fire('Erro', 'Não foi possível registrar o dispositivo.', 'error')\n        });\n      }\n    } else {\n      Swal.fire('Erro', 'Por favor, preencha todos os campos corretamente.', 'error');\n    }\n  }\n  static #_ = this.ɵfac = function DeviceRegisterComponent_Factory(t) {\n    return new (t || DeviceRegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.DeviceService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DeviceRegisterComponent,\n    selectors: [[\"app-device-register\"]],\n    inputs: {\n      device: \"device\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 27,\n    vars: 3,\n    consts: [[1, \"card\", \"shadow-sm\", \"p-4\", \"mt-5\"], [1, \"card-body\"], [1, \"title\", \"b-4\"], [1, \"mb-2\"], [\"novalidate\", \"\", 1, \"row\", \"g-3\", \"align-items-end\", \"needs-validation\", \"mt-3\", 3, \"formGroup\", \"ngSubmit\"], [1, \"col-md-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"id\", \"name\", \"formControlName\", \"name\", \"type\", \"text\", \"required\", \"\", 1, \"form-control\"], [1, \"invalid-feedback\"], [\"for\", \"manufacturer\", 1, \"form-label\"], [\"id\", \"manufacturer\", \"formControlName\", \"manufacturer\", \"type\", \"text\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"description\", 1, \"form-label\"], [\"id\", \"description\", \"formControlName\", \"description\", \"type\", \"text\", \"required\", \"\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"]],\n    template: function DeviceRegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"hr\", 3);\n        i0.ɵɵelementStart(5, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function DeviceRegisterComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n        i0.ɵɵtext(8, \"Nome:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 7);\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵtext(11, \" Por favor, insira o nome do dispositivo. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 5)(13, \"label\", 9);\n        i0.ɵɵtext(14, \"Fabricante:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 10);\n        i0.ɵɵelementStart(16, \"div\", 8);\n        i0.ɵɵtext(17, \" Por favor, insira o fabricante do dispositivo. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\", 5)(19, \"label\", 11);\n        i0.ɵɵtext(20, \"Descri\\u00E7\\u00E3o:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 12);\n        i0.ɵɵelementStart(22, \"div\", 8);\n        i0.ɵɵtext(23, \" Por favor, insira uma descri\\u00E7\\u00E3o. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(24, \"div\", 5)(25, \"button\", 13);\n        i0.ɵɵtext(26);\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.device ? \"Editar\" : \"Registrar\", \" um novo Dispositivo\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.deviceForm);\n        i0.ɵɵadvance(21);\n        i0.ɵɵtextInterpolate1(\"\", ctx.device ? \"Atualizar\" : \"Registrar\", \" Dispositivo\");\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".card[_ngcontent-%COMP%] {\\n  background-color: #fbfbfb;\\n  border: 1px solid #e4e1e1;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9kZXZpY2VzL2RldmljZS1yZWdpc3Rlci9kZXZpY2UtcmVnaXN0ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSx5QkFBQTtFQUNBLHlCQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIuY2FyZHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmJmYmZiO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNlNGUxZTE7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["Validators","Swal","DeviceRegisterComponent","constructor","fb","deviceService","console","log","device","deviceForm","group","id","name","required","description","manufacturer","ngOnInit","ngOnChanges","changes","currentValue","patchValue","submitForm","valid","deviceData","value","updateDevice","subscribe","next","fire","reset","error","addDevice","selectors","inputs","features","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/cabukater/Projects/teste-front/front/src/app/components/devices/device-register/device-register.component.ts","/Users/cabukater/Projects/teste-front/front/src/app/components/devices/device-register/device-register.component.html"],"sourcesContent":["import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { DeviceService } from 'src/app/services/device/device.service';\nimport { Device } from 'src/app/models/device.model';\nimport Swal from 'sweetalert2';\n\n@Component({\n  selector: 'app-device-register',\n  templateUrl: './device-register.component.html',\n  styleUrls: ['./device-register.component.scss']\n})\nexport class DeviceRegisterComponent implements OnInit, OnChanges {\n  deviceForm: FormGroup;\n  @Input() device: Device | null = null; \n  constructor(\n    private fb: FormBuilder,\n    private deviceService: DeviceService\n  ) {\n    console.log(this.device);\n    this.deviceForm = this.fb.group({\n      id: [null],\n      name: ['', Validators.required],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required]\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['editingDevice'] && changes['editingDevice'].currentValue) {\n      this.deviceForm.patchValue(changes['editingDevice'].currentValue);\n    }\n  }\n\n  submitForm(): void {\n    if (this.deviceForm.valid) {\n      const deviceData = this.deviceForm.value;\n\n      if (this.device) {\n        // Atualiza o dispositivo existente\n        this.deviceService.updateDevice(deviceData.id).subscribe({\n          next: () => {\n            Swal.fire('Atualizado', 'Dispositivo atualizado com sucesso!', 'success');\n            this.deviceForm.reset();\n            this.device = null;\n          },\n          error: () => Swal.fire('Erro', 'Não foi possível atualizar o dispositivo.', 'error')\n        });\n      } else {\n        // Adiciona um novo dispositivo\n        this.deviceService.addDevice(deviceData).subscribe({\n          next: () => {\n            Swal.fire('Registrado', 'Dispositivo registrado com sucesso!', 'success');\n            this.deviceForm.reset();\n          },\n          error: () => Swal.fire('Erro', 'Não foi possível registrar o dispositivo.', 'error')\n        });\n      }\n    } else {\n      Swal.fire('Erro', 'Por favor, preencha todos os campos corretamente.', 'error');\n    }\n  }\n}\n","<div class=\"card shadow-sm p-4 mt-5\">\n  <div class=\"card-body\">\n    <h3 class=\"title b-4\">{{ device ? 'Editar' : 'Registrar' }} um novo Dispositivo</h3>\n    <hr class=\"mb-2\">\n\n    <form [formGroup]=\"deviceForm\" (ngSubmit)=\"submitForm()\" class=\"row g-3 align-items-end needs-validation mt-3\" novalidate>\n      <div class=\"col-md-3\">\n        <label for=\"name\" class=\"form-label\">Nome:</label>\n        <input id=\"name\" formControlName=\"name\" type=\"text\" class=\"form-control\" required>\n        <div class=\"invalid-feedback\">\n          Por favor, insira o nome do dispositivo.\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n        <label for=\"manufacturer\" class=\"form-label\">Fabricante:</label>\n        <input id=\"manufacturer\" formControlName=\"manufacturer\" type=\"text\" class=\"form-control\" required>\n        <div class=\"invalid-feedback\">\n          Por favor, insira o fabricante do dispositivo.\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n        <label for=\"description\" class=\"form-label\">Descrição:</label>\n        <input id=\"description\" formControlName=\"description\" type=\"text\" class=\"form-control\" required>\n        <div class=\"invalid-feedback\">\n          Por favor, insira uma descrição.\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n        <button type=\"submit\" class=\"btn btn-primary\">{{ device ? 'Atualizar' : 'Registrar' }} Dispositivo</button>\n      </div>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}